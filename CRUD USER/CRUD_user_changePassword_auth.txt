# at /etc/mongod.conf
| sucirty:
|    authorization: enabled


#----------------------------------------------------------------------------------------------------------------------------------------------------
#                               SUPER USER

1. Create User:

# for super admin user in admin database
# first diasbled authorization at /etc/mongod.conf file
# then give this command " $ sudo systemctl restart mongod.service"
# then "$mongosh"

test> use admin
admin> show roles

admin> db.createUser({
  user: "taib",
  pwd: "1234",
  roles: [
    { role: "root", db: "admin" },
    { role: "read", db: "admin" },
    { role: "readWrite", db: "admin" },
    { role: "readAnyDatabase", db: "admin" },
    { role: "dbAdmin", db: "admin" },
    { role: "dbOwner", db: "admin" },
    { role: "userAdmin", db: "admin" },
    { role: "dbAdminAnyDatabase", db: "admin" },
    { role: "userAdminAnyDatabase", db: "admin" },
    { role: "clusterAdmin", db: "admin" },
    { role: "hostManager", db: "admin" },
    { role: "__system", db: "admin" },
    { role: "__queryableBackup", db: "admin" },
    { role: "clusterMonitor", db: "admin" },
    { role: "directShardOperations", db: "admin" },
    { role: "clusterManager", db: "admin" },
    { role: "enableSharding", db: "admin" },
    { role: "readWriteAnyDatabase", db: "admin" },
    { role: "restore", db: "admin" },
    { role: "backup", db: "admin" }
  ],
  mechanisms: ["SCRAM-SHA-256"],
  customData: {
    email: "analyst@example.com"
  }
})

** you can create another super user as "bro", from this super user as "taib"

# then enabled authorization at /etc/mongod.conf file
# then give this command " $sudo systemctl restart mongod.service"

# then
2. Read User:

# then apply this '$mongosh "mongodb://taib:1234@127.0.0.1:27017" --authenticationDatabase admin" '
# or $mongosh "mongodb://taib:1234@127.0.0.1:27017/admin" --authenticationDatabase admin

admin> db.getUser("taib") // for single user 
admin> db.getUser("bro")

admin> db.getUsers() // for all users


3. Update User

# then apply this '$mongosh "mongodb://taib:1234@127.0.0.1:27017" --authenticationDatabase admin" ' // then test>use admin
# or $mongosh "mongodb://taib:1234@127.0.0.1:27017/admin" --authenticationDatabase admin

admin> db.updateUser("taib", { 
  pwd: "4321",
  roles: [
    { role: "read", db: "admin" },
    { role: "readWrite", db: "admin" },
    { role: "userAdmin", db: "admin" },
    { role: "dbAdmin", db: "admin" },
    { role: "__system", db: "admin" },
    { role: "clusterMonitor", db: "admin" },
    { role: "clusterAdmin", db: "admin" },
    { role: "directShardOperations", db: "admin" },
    { role: "clusterManager", db: "admin" },
    { role: "dbOwner", db: "admin" },
  ],
  mechanisms: ["SCRAM-SHA-256"],
  customData: {
    email: "analyst@example.com"
  }
})


4. Delete User
admin> db.dropUser("taib") // when we are in current user
admin> db.dropUser("bro") // when we are from current user

# when there have no super admin user in admin database then goto /etc/mongod.conf file
# then make disabled authorization and give this command 
# create super admin user again
# "$sudo systemctl restart mongod.service"

5. change password:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017/admin" --authenticationDatabase admin

admin> db.changeUserPassword("taib","4321")

# --------------------------------------------------------------------------
#                             DATABASE-SPECIFIC-ADMIN-USER

# for database-specific-admin user in application or system database
# you don't need disabled authorization for database-specific-admin user
# just give this command 


1. Create User:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017" --authenticationDatabase admin // then test>use products
# or $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin

products> show roles // $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin

products> db.createUser({
  user: "taibProducts",
  pwd: "4321",
  roles: [
    { role: "read", db: "products" },
    { role: "readWrite", db: "products" },
    { role: "dbAdmin", db: "products" },
    { role: "dbOwner", db: "products" },
    { role: "userAdmin", db: "products" },
    { role: "enableSharding", db: "products" }
  ],
  mechanisms: ["SCRAM-SHA-256"],
  customData: {
    email: "admin@example.com"
  }
})

2. Read User:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin
# $mongosh "mongodb://taibProducts:4321@127.0.0.1:27017/products" --authenticationDatabase products

products> db.getUsers()
products> db.getUser("taibProducts")

3. Update User:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017" --authenticationDatabase admin // and also test> use products
# or $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin

products> db.updateUser("taibProducts", {
  pwd: "1234",
  roles: [
    { role: "read", db: "products" },
    { role: "readWrite", db: "products" },
    { role: "dbAdmin", db: "products" },
    { role: "dbOwner", db: "products" }
  ],
  mechanisms: ["SCRAM-SHA-256"],
  customData: {
    email: "admin@example.com"
  }
})

4. Delete User:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin
# $mongosh "mongodb://taibProducts:4321@127.0.0.1:27017/products" --authenticationDatabase products

products> db.dropUser("taibProducts")

5. change password:

# $mongosh "mongodb://taib:1234@127.0.0.1:27017/products" --authenticationDatabase admin
# $mongosh "mongodb://taibProducts:4321@127.0.0.1:27017/products" --authenticationDatabase products

products> db.changeUserPassword("taib","1234")

# --------------------------------------------------------------------------------------------------------------------------------

* summary is you can do use operation, when you are super user of admin database. but you can only read and delete, when you are database-specific-admin user of application database

** More Commands:
	admin> db.runCommand({ connectionStatus: 1 }) // Check Current User Privileges
	admin> db.auth("taib", "1234") // checking authentication with user and password
